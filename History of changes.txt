Hisory of changes

02.04.2020
1. Fixed unsuspected bug in getDoubleHexRaw() that was lead to incorrect rounding with numbers that have -1075 exponent.
2. Fixed some typos.

31.03.2020
1. Method MiniMath.innerDiv() was updated.
2. .getDoubleHexRaw() in the SlicedDouble class was updated.

30.03.2020
1. Removed method .checkRaw() from SlicedDouble as it no more needed.
2. Minor edits in several SlicedDouble methods.
3. Documentation of SlicedDouble class is completed.

29.03.2020
1. SlashedDouble class was renamed to SlicedDouble.
2. Added full Java documentation to all methods in MiniMath class.
3. Added small part of Java documentation in SlicedDouble class.
4. Removed one of the constructors in SlicedDouble class.
5. Minor edits to both classes was applied.

28.03.2020
1. Added MiniMath.intPowerNoLimits() method to permit handle double overflowing numbers.
2. MiniMath.substaract() was renamed to MiniMath.substraction() to comply with style of other names.
3. Adding java documentation to MiniMath source is in the progress.
4. Added individual test methods to MiniMath.


26.03.2020
1. MiniMath.substract() and MiniMath.innerSub() methods are ready to use;
2. Corrected misprint in regexp pattern in SlashedDouble .parseRaw();
3. Added MiniMath.reverseSign() method to SlashedDouble.
4. MiniMath.floorMod() method is ready.
5. MiniMath.sum() method is ready.
6. All functions were tested on large range of values many times, and after debugging all works correctly.

25.03.2020
1. Added getFractPowerResult() method to MiniMath, and fractPower() was updated to include callings of it.
2. SlashedDouble.fetchRaw() was renamed to parseRaw() and overloading method was added.
3. Added new div() methods for integer division, and the former div() methods wich returns result with fraction part was renamed to division().
4. Added methods getPairSign() and divisionPreCheck() for generalization these operations. Thereafter mult(), pow() and division() methods was updated.
5. Added floorDiv() method to MiniMath, that works similarly like its colleague from Math class, except that it return Double, or SlashedDouble results and because of it nature, there is -0.0 result availible, and there is no integer overflow likewise special case with dividend Integer.MIN_VALUE and divisor -1 that lead to overflow in Math.floorDiv() function.
6. Added remainderPreCheck() method.
7. Added divisionRemainder() method that works similarly like '%' operator.
8. Work on innerSub() method in progress.

24.03.2020
1. Added abs() method to MiniMath.
2. getRootExponent() method in MiniMath was updated and simplified.
3. Added clone() method and relying on it private constructor in SlashedDouble class.
4. innerDiv() and div() methods are began to work.
5. pow(SlashedDouble sdnum, SlashedDouble sdnum), intPower(), innerMult() were updated according to availibility of division and thereafter negative powers.
6. Added getOppositeExtremum() method returning infinity when input is 0 and 0 when input is infinity saving origin sign, and NaN in other cirumstances.
7. Added checkExponentExtremum() and preciding it getIntPowerResult() methods, that helps to carry over some temporary overflowing values. It can be the case when we've got an exponent 1024 < e < 1075 (in basis of two). In usual conditions it is an overflow already, but if we raising to negative power this intermediate result can lead to legal value in the end, as we will can get a denormal number, that is under -1024 degree.
8. innerDiv() method demonstrate very accurate results. The total accuracy of pow() method on digits that are below 13 digit after decimal point was decreased in 2-5 times, but it's still very impressive (< 40 of 1,280,000 numbers for the first 14 digits after decimal point).

23.03.2020
1. Updated method fetchRaw() to handle empty input.
2. getIntRaw(), getFractRaw(), getFractRaw(), getFractSD() were reassembled.
3. getLongIntRaw(), getIntegerIntRaw(), getLongFractRaw(), isDone() were removed.
4. Removed two constructors from SlashedDouble class as they don't need any more.
5. There is minor edits in rest constructors logic and related methods slshIt() and fetchRaw().
6. Finded and corrected little misprint in innerMult().
7. getDoubleRaw() method was reassembled and renamed to getIEEE754Bin().
8. ceil() method was added to MiniMath class.
9. Private innerDiv() method and respective public interfaces building in progress.

22.03.2020
1. Method roundResult() in MiniMath class was upgraded to holding some unusual vaules, but it's still have worse accuracy against simplified rounding version in getRoundedRaw() method of SlashedDouble.
2. Method isOddIntDigitsNum() and this is simplified respective condition instruction in innerRoot() method.
3. isOdd() method was changed in sense of to cutoff intraw variable reminding.
4. mult() and pow() methods received overloading methods with SlashedDouble incoming.
5. getIntegerIntRaw(), getLongIntRaw were turned off for the reason of implementing new logic in both availible classes.
6. Added getIntSD() and getFractSD() methods to SlashedDouble.
7. floor() and fraction() methods added to MiniMath.


20.03.2020
1. Fixed bug in mathematical integer and fraction parts of number calculating in getIntRaw() and getFractRaw() methods, by replacing a few instructions in three SlashedDouble constructors.
2. Added roundResult() method to MiniMath class. It implements scaled rounding that applicates in double-precision rounding. It works correctly, but because of lack of availible digits at some stage it cannot calculate correctly needed number. What is more intresting is that getRoundedRaw() method in the SlashedDouble class, which produce a pretty simple rounding based on the value of the first cutting character, is much accurate and gives up to 1.5-2 times less missed values in the case of 14 digits after decimal point. I will keep this (roundResult()) method, but will not be use it for now.
3. Fixed bug with mathematical integer part - to resolve it, I had to refused from integer type for integral degrees in favor of long type.
4. Fixed bug with extra big powers handling.

19.03.2020
1. Fixed processing of some extra large numbers.
2. Added isOdd() method to SlashedDouble class and now pow() works more correctly with negative numbers by more precisely getting sign of result.
3. Added isOddDigitsNum() method to resolve issue with taking some roots.
4. Fixed unit rounding in innerMult().
5. Fixed issue of processing degree of denormal numbers in SlashedDouble getDoubleRaw() method.
6. Deleted one unused constructor from SlashedDouble class.
7. Upgraded two constructors with cutFractTail() method which work not so correctly in them before, but now it work as it should and total speed for almost all pow() operations highly increased.
8. Fixed issue that was lead to error in resulting sign conclusion in setSign() method. 
9. After all upgrades total accuracy raised up to 99.9999% for first 12 digits after decimal point in decimal notation, and to 99.995% for first 13 digits and more of it: in up to 16 digits after decimal point almost all numbers are correct. All accuracy miss accounts in some very specific extra small and extra large  powers. I suppose it happens because of surrogate long variable overflow and processing this overflow. However this processing seems to be the best way for it. The only way, it sees from this point, to improve accuracy to 100% is to attach additional surrogate raw that will be handling all overflowing digits. But for now, implying such thing is not the primary objective. And I don't know will I imply it at all, because 100% accuracy aginst hardware floating point calculation is not the main purpose of the current project.
10. Some variables naming revision accomplished.
11. TODO: divider.

18.03.2020
1. Finded issue in taking root processing. Succefully resolved.
2. Testing method changed. Now it more accurate.
3. MiniMath.innerMult(SlashedDouble number1, SlashedDouble number2) method received additional rounding instructions.
4. Fixed issue in calculating negative root exponent.
5. Fixed issue of rounding numbers around 1.0 (there was an overflow in MiniMath.innerMult() when number was almost full of 'ones').
6. Fixed several other issues with holding extra small and extra large numbers.
7. TODO: fix processing of some extra large numbers.